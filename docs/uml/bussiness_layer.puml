@startuml



package business_layer {
    class TuringMachineController {
        - machines: Dictionary<string, TuringMachine>

        + add(name: string, machine: TuringMachine): void
        + remove(name: string): void
        + get_turing_machine(name: string): TuringMachine
        + get_all_names(): Iterable<string>
        + run(turing_machine_name:string,input:string):Machine_Run_State
        +visualize(Turing_machine_name:string, input:string):void
        +visualize_step_by_step(Turing_machine_name:string, input:string):void
        -display_step_at_index(steps[], index:int , step_counter:int): int
        -display_steps_of_visualizer(steps[]): void
        -print_step(step : Machine_Run_State , step_counter:int):void
        +validate(Turing_machine_name:string,function_obj,extreme_case:list<string>,test_count:int,max_input_length:int):boolean

    }


 class CombinedTuringMachine <<immutable dataclass>> {
        -turing_machines: list<string>
        +run() : configuration
        + states: FrozenSet<State>
        + input_alphabet: list<string>
        + tape_alphabet: list<string>
        + blank_character: Letter
        + delta: TransitionTable
        + accepting_state: State
        + rejecting_state: State
        + initial_state: State

    }


     class TuringMachineVisualizer <<immutable dataclass>> {
        -turing_machine: TuringMachine | CombinedTuringMachine
        -steps : list<Machine_Run_State>
        +run_and_visualize ( input_string:string, max_steps:int): list<Machine_Run_State>
    }

    class Configuration <<immutable dataclass>> {
         -state :State
        -symbol:string
        -action:string
    }

       class State <<immutable dataclass>> {
        -state:string
    }


    class TuringMachine <<immutable dataclass>> {
        + states: list<State>
        + input_alphabet: list<string>
        + tape_alphabet: list<string>
        + blank_character: string
        + transitions: Dictionary< Tuple< state:State,tape_symbol:string > ,configuration >
        + accepting_state: list<State>
        + rejecting_state: State
        + initial_state: State
        +current_machine_state:Machine_Run_State
        +run(input_string:string):Machine_Run_State
        +run_step(configuration):Machine_Run_State
        +contains_chars(input_string:string, input_alphabet:list<string>):boolean
        +run_combined(input_string:string,head_position:int):configuration

    }

    class Machine_Run_State {
       -tape :list<string>
       -head_position:int
       -state:State
    }



package testing {
    abstract class TuringMachineTester {

    }

    class ConstantWordsTester {

    }

    class RandomizedTester {

    }

    ConstantWordsTester -u-|> TuringMachineTester
    RandomizedTester -u-|> TuringMachineTester

    }
}


package service_layer {

}

package presentation_layer {

}

service_layer -d-> bussiness
presentation_layer -d-> service_layer

@enduml