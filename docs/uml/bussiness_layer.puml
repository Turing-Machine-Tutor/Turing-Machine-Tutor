@startuml



package bussiness {
    class TuringMachineController {
        - machines: Dictionary<string, TuringMachine>

        + add(name: string, machine: TuringMachine): void
        + remove(name: string, machine: TuringMachine): void
        + get(name: string): TuringMachine
        + get_all_names(): Iterable<string>
        + run(turing_machine_name:string,input:string):tuple(tape:Tape,state:state,head_position:int)
        +visualize(Turing_machine_name:string, input:string):void
        +validate(Turing_machine_name:name,function_obj,extreme_case:list<string>,test_count:int,max_input_length:int):boolean

    }


 class CombinedTuringMachine <<immutable dataclass>> {
        -turing_machines: list<string>
        +run() : TuringMachineRun
        + states: FrozenSet<State>
        + input_alphabet: Alphabet
        + tape_alphabet: Alphabet
        + blank_character: Letter
        + delta: TransitionTable
        + accepting_state: State
        + rejecting_state: State
        + initial_state: State

    }


     class TuringMachineVisualizer <<immutable dataclass>> {
        -turing_machine: TuringMachine | CombinedTuringMachine
        -steps : list<(tape:tape,head_position:int,current_state:state)>
        -add_step(tuple(tape,head_position,current_state)) : void
        +build_steps():void
        -build_steps_turingmachine(): void
        -build_steps_turingmachinecombined(): void
        +get_steps():list<(tape:tape,head_position:int,current_state:state)>
    }

    class TuringMachine <<immutable dataclass>> {
        + states: FrozenSet<State>
        + input_alphabet: Alphabet
        + tape_alphabet: Alphabet
        + blank_character: Letter
        + delta: TransitionTable
        + accepting_state: State
        + rejecting_state: State
        + initial_state: State

    }

    class TuringMachineRun {
       - machine: TuringMachine
       - current_tape: Tape
       - input: Word
       - state: State
       - head_position: int
       - history: Stack<Undo>

       + get_result(): TuringMachineResult
       + reset(): void
       + step(): void
       + undo(): void
       + run_multiple_steps(): void
    }

    class TuringMachineConfiguration {

    }

package testing {
    abstract class TuringMachineTester {

    }

    class ConstantWordsTester {

    }

    class RandomizedTester {

    }

    ConstantWordsTester -u-|> TuringMachineTester
    RandomizedTester -u-|> TuringMachineTester

    }
}


package service_layer {

}

package presentation_layer {

}

service_layer -d-> bussiness
presentation_layer -d-> service_layer

@enduml